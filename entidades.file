MJose-MacBook-Pro:beaker mj$ php app/console doctrine:generate:entity  Welcome to the Doctrine2 entity generatorThis command helps you generate Doctrine2 entities.First, you need to give the entity name you want to generate.You must use the shortcut notation like AcmeBlogBundle:Post.The Entity shortcut name: LumenAppBundle:TipoMuestraDetermine the format to use for the mapping information.Configuration format (yml, xml, php, or annotation) [annotation]:Instead of starting with a blank entity, you can add some fields now.Note that the primary key will be added automatically (named id).Available types: array, simple_array, json_array, object,boolean, integer, smallint, bigint, string, text, datetime, datetimetz,date, time, decimal, float, binary, blob, guid, json.New field name (press <return> to stop adding fields): nombreField type [string]:Field length [255]:Is nullable [false]:Unique [false]:New field name (press <return> to stop adding fields): descripcionField type [string]:Field length [255]:Is nullable [false]: trueUnique [false]:New field name (press <return> to stop adding fields):  Entity generation  created ./src/Lumen/AppBundle/Entity/TipoMuestra.php> Generating entity class src/Lumen/AppBundle/Entity/TipoMuestra.php: OK!> Generating repository class src/Lumen/AppBundle/Repository/TipoMuestraRepository.php: OK!  Everything is OK! Now get to work :).MJose-MacBook-Pro:beaker mj$ php app/console doctrine:generate:entity  Welcome to the Doctrine2 entity generatorThis command helps you generate Doctrine2 entities.First, you need to give the entity name you want to generate.You must use the shortcut notation like AcmeBlogBundle:Post.The Entity shortcut name: LumenAppBundle:MuestraDetermine the format to use for the mapping information.Configuration format (yml, xml, php, or annotation) [annotation]:Instead of starting with a blank entity, you can add some fields now.Note that the primary key will be added automatically (named id).Available types: array, simple_array, json_array, object,boolean, integer, smallint, bigint, string, text, datetime, datetimetz,date, time, decimal, float, binary, blob, guid, json.New field name (press <return> to stop adding fields): tipoMuestraField type [string]:Field length [255]:Is nullable [false]:Unique [false]:New field name (press <return> to stop adding fields):  Entity generation  created ./src/Lumen/AppBundle/Entity/Muestra.php> Generating entity class src/Lumen/AppBundle/Entity/Muestra.php: OK!> Generating repository class src/Lumen/AppBundle/Repository/MuestraRepository.php: OK!  Everything is OK! Now get to work :).MJose-MacBook-Pro:beaker mj$ php app/console doctrine:generate:entity  Welcome to the Doctrine2 entity generatorThis command helps you generate Doctrine2 entities.First, you need to give the entity name you want to generate.You must use the shortcut notation like AcmeBlogBundle:Post.The Entity shortcut name: LumenAppBundle:ServiciosDetermine the format to use for the mapping information.Configuration format (yml, xml, php, or annotation) [annotation]:Instead of starting with a blank entity, you can add some fields now.Note that the primary key will be added automatically (named id).Available types: array, simple_array, json_array, object,boolean, integer, smallint, bigint, string, text, datetime, datetimetz,date, time, decimal, float, binary, blob, guid, json.New field name (press <return> to stop adding fields): nombreField type [string]:Field length [255]:Is nullable [false]:Unique [false]:New field name (press <return> to stop adding fields): precioField type [string]: integerIs nullable [false]:Unique [false]:New field name (press <return> to stop adding fields):  Entity generation  created ./src/Lumen/AppBundle/Entity/Servicios.php> Generating entity class src/Lumen/AppBundle/Entity/Servicios.php: OK!> Generating repository class src/Lumen/AppBundle/Repository/ServiciosRepository.php: OK!  Everything is OK! Now get to work :).MJose-MacBook-Pro:beaker mj$ php app/console doctrine:generate:entity  Welcome to the Doctrine2 entity generatorThis command helps you generate Doctrine2 entities.First, you need to give the entity name you want to generate.You must use the shortcut notation like AcmeBlogBundle:Post.The Entity shortcut name: LumenAppBundle:SolicitudesDetermine the format to use for the mapping information.Configuration format (yml, xml, php, or annotation) [annotation]:Instead of starting with a blank entity, you can add some fields now.Note that the primary key will be added automatically (named id).Available types: array, simple_array, json_array, object,boolean, integer, smallint, bigint, string, text, datetime, datetimetz,date, time, decimal, float, binary, blob, guid, json.New field name (press <return> to stop adding fields):  Entity generation  created ./src/Lumen/AppBundle/Entity/Solicitudes.php> Generating entity class src/Lumen/AppBundle/Entity/Solicitudes.php: OK!> Generating repository class src/Lumen/AppBundle/Repository/SolicitudesRepository.php: OK!  Everything is OK! Now get to work :).MJose-MacBook-Pro:beaker mj$ php app/console doctrine:generate:entity  Welcome to the Doctrine2 entity generatorThis command helps you generate Doctrine2 entities.First, you need to give the entity name you want to generate.You must use the shortcut notation like AcmeBlogBundle:Post.The Entity shortcut name: LumenAppBundle:CategoriaServiciosDetermine the format to use for the mapping information.Configuration format (yml, xml, php, or annotation) [annotation]:Instead of starting with a blank entity, you can add some fields now.Note that the primary key will be added automatically (named id).Available types: array, simple_array, json_array, object,boolean, integer, smallint, bigint, string, text, datetime, datetimetz,date, time, decimal, float, binary, blob, guid, json.New field name (press <return> to stop adding fields): nombreField type [string]:Field length [255]:Is nullable [false]:Unique [false]:New field name (press <return> to stop adding fields): descripcionField type [string]:Field length [255]:Is nullable [false]: trueUnique [false]:New field name (press <return> to stop adding fields):  Entity generation  created ./src/Lumen/AppBundle/Entity/CategoriaServicios.php> Generating entity class src/Lumen/AppBundle/Entity/CategoriaServicios.php: OK!> Generating repository class src/Lumen/AppBundle/Repository/CategoriaServiciosRepository.php: OK!  Everything is OK! Now get to work :).MJose-MacBook-Pro:beaker mj$ php app/console doctrine:schema:update --dump-sqlCREATE TABLE categoria_servicios (id INT AUTO_INCREMENT NOT NULL, nombre VARCHAR(255) NOT NULL, descripcion VARCHAR(255) DEFAULT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;CREATE TABLE muestra (id INT AUTO_INCREMENT NOT NULL, id_tipomuestra INT DEFAULT NULL, INDEX IDX_70FE1350466CF3C (id_tipomuestra), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;CREATE TABLE servicios (id INT AUTO_INCREMENT NOT NULL, id_categoriaservicios INT DEFAULT NULL, nombre VARCHAR(255) NOT NULL, precio INT NOT NULL, INDEX IDX_C07E802F5CF096F0 (id_categoriaservicios), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;CREATE TABLE solicitudes (id INT AUTO_INCREMENT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;CREATE TABLE tipo_muestra (id INT AUTO_INCREMENT NOT NULL, nombre VARCHAR(255) NOT NULL, descripcion VARCHAR(255) DEFAULT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;ALTER TABLE muestra ADD CONSTRAINT FK_70FE1350466CF3C FOREIGN KEY (id_tipomuestra) REFERENCES tipo_muestra (id);ALTER TABLE servicios ADD CONSTRAINT FK_C07E802F5CF096F0 FOREIGN KEY (id_categoriaservicios) REFERENCES categoria_servicios (id);MJose-MacBook-Pro:beaker mj$ php app/console doctrine:schema:update --forceUpdating database schema...Database schema updated successfully! "7" queries were executedMJose-MacBook-Pro:beaker mj$