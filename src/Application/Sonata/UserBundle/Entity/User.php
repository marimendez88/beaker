<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\UserBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Sonata\UserBundle\Entity\BaseUser as BaseUser;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Validator\Constraints as Assert;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author Leonardo Monge
 
 * User
 *
 * @ORM\Table(name="fos_user_user")
 * @ORM\Entity
 * @ORM\Entity(repositoryClass="UserRepository")
 * @ORM\HasLifecycleCallbacks
 * @UniqueEntity(fields="email", groups={"registration"}, message="El email ya esta en uso.")
 */
define('PROFILE_IMAGE_PATH', 'profile');
class User extends BaseUser
{    
    /**
     * @var integer $id
     * 
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\ManyToMany(targetEntity="Application\Sonata\UserBundle\Entity\Group")
     * @ORM\JoinTable(name="fos_user_user_group")
     */
    protected  $groups;
    
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->image  = 'default.jpg';
        parent::__construct();
    }

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $image;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $originalImage;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $realPathImage;

    
//    // <editor-fold defaultstate="collapsed" desc="Upload Imagen de Perfil">
//    /**
//     * @ORM\Column(type="string", length=255, nullable=true)
//     */
//    public $image;
//
//    /**
//     * @Assert\File(maxSize="6000000")
//     */
//    private $file;
//
//    /**
//     * ORM\Column(type="string", length=255, nullable=true)
//     */
////    public $path;
//
//    private $tempPath;
//
//    public function getAbsolutePath()
//    {
//        return null === $this->image ? null : $this->getUploadRootDir() . '/' . $this->image;
//    }
//
//    public function getWebPath()
//    {
//        return null === $this->image ? null : $this->getUploadDir() . '/' . $this->image;
//    }
//
//    public function getUploadRootDir()
//    {
//        // the absolute directory imagen where uploaded
//        // documents should be saved
//        return __DIR__ . '/../../../../../web/' . $this->getUploadDir();
//    }
//
//    public function getUploadDir()
//    {
//        // get rid of the __DIR__ so it doesn't screw up
//        // when displaying uploaded doc/image in the view.
//        return 'uploads/' . PROFILE_IMAGE_PATH;
//    }
//
//    public function setFile(UploadedFile $file = null)
//    {
//        $this->file = $file;
//        // check if we have an old image imagen
//        if (isset($this->image))
//        {
//            // store the old name to delete after the update
//            $this->tempPath = $this->image;
//            $this->image = null;
//        } else
//        {
//            $this->image = 'initial';
//        }
//    }
//
//    /**
//     * Get file.
//     *
//     * @return UploadedFile
//     */
//    public function getFile()
//    {
//        return $this->file;
//    }
//
//    /**
//     * @ORM\PrePersist()
//     * @ORM\PreUpdate()
//     */
//    final public function preUploadEntityImage()
//    {
//        if (null !== $this->getFile())
//        {
//            // do whatever you want to generate a unique name
//            $filename = sha1(uniqid(mt_rand(), true));
//            $this->image = $filename . '.' . $this->getFile()->guessExtension();
//        }
//    }
//
//    /**
//     * @ORM\PostPersist()
//     * @ORM\PostUpdate()
//     */
//    final public function uploadEntityImage()
//    {
//        if (null === $this->getFile())
//        {
//            return;
//        }
//
//        // if there is an error when moving the file, an exception will
//        // be automatically thrown by move(). This will properly prevent
//        // the entity from being persisted to the database on error
//        $this->getFile()->move($this->getUploadRootDir(), $this->image);
//
//        // check if we have an old image
//        if (isset($this->tempPath) && $this->tempPath !== 'default.jpg')
//        {
//            // delete the old image
//            @unlink($this->getUploadRootDir() . '/' . $this->tempPath);
//            // clear the temp image imagen
//            $this->tempPath = null;
//        }
//
//        $this->file = null;
//    }
//
//    /**
//     * @ORM\PostRemove()
//     */
//    final public function removeUploadEntityImage()
//    {
//        if ($file = $this->getAbsolutePath())
//        {
//            if ($this->image)
//            {
//                unlink($file);
//            }
//        }
//    }
//
//    public $fotoUrl;
//
//    public function getFotoUrl()
//    {
//        return $this->fotoUrl;
//    }
//
//    public function getPictureName()
//    {
//        return $this->image;
//    }
//
//    /**
//     * Set image
//     *
//     * @param string $image
//     * @return User
//     */
//    public function setImage($image)
//    {
//        $this->image = $image;
//
//        return $this;
//    }
//
//    /**
//     * Get image
//     *
//     * @return string
//     */
//    public function getImage()
//    {
//        return $this->image;
//    }
//
//// </editor-fold>


    public function humanCountry()
    {
        $c = \Symfony\Component\Locale\Locale::getDisplayCountries('en');

        return array_key_exists($this->getCountry(), $c) ? $c[$this->getCountry()] : $this->getCountry();
    }
    
    public function getSlug()
    {
        return \Lumen\ImportsBundle\Resources\LumenUtils\Utils::slugify($this->getFullName());
    }
    
    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return mixed
     */
    public function getImage()
    {
        return $this->image;
    }

    /**
     * @param mixed $image
     */
    public function setImage($image)
    {
        $this->image = $image;
    }

    /**
     * @return mixed
     */
    public function getRealPathImage()
    {
        return $this->realPathImage;
    }

    /**
     * @param mixed $realPathImage
     */
    public function setRealPathImage($realPathImage)
    {
        $this->realPathImage = $realPathImage;
    }

    /**
     * @return mixed
     */
    public function getOriginalImage()
    {
        return $this->originalImage;
    }

    /**
     * @param mixed $originalImage
     */
    public function setOriginalImage($originalImage)
    {
        $this->originalImage = $originalImage;
    }


    public function getUploadRootDir()
    {
        // absolute path to your directory where images must be saved
        return __DIR__.'/../../../../../web/'.$this->getUploadDir();
    }

    public function getUploadDir()
    {
        return 'uploads/profile';
    }

    public function getAbsolutePath()
    {
        return null === $this->image ? null : $this->getUploadRootDir().'/'.$this->image;
    }

    public function getWebPath()
    {
        return null === $this->image ? null : '/'.$this->getUploadDir().'/'.$this->image;
    }


}
